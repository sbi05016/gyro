streamlit run '.\관리자 페이지_음성파일 검색.py' --server.port 8302
10:23
# streamlit run '.\관리자 페이지_작업내역 조회.py' --server.port 8301
import streamlit as st
import psycopg2
import pandas.io.sql as psql
from sqlalchemy import create_engine
import datetime
# 데이터베이스 설정
HOSTNAME = '203.253.202.13'
PORT     = 5432
USERNAME = 'postgres'
PASSWORD = 'kkilab3415'
DATABASE = 'vhf_labeling'
# 접속 엔진 생성
con_str_fmt = "postgresql://{0}:{1}@{2}:{3}/{4}"
con_str = con_str_fmt.format(USERNAME, PASSWORD, HOSTNAME, PORT, DATABASE)
engine = create_engine(con_str)
# 현재 시간
current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
# 사용자 목록을 데이터베이스에서 가져오고, 작업량 순으로 정렬하는 함수
def get_worker_names_with_counts(start_date,end_date, step_num_str):
    connection = psycopg2.connect(host=HOSTNAME, dbname=DATABASE, user=USERNAME, password=PASSWORD)
    if step_num_str != '0':
        query = f"""
            SELECT step{step_num_str}_worker_name, COUNT(*) as task_count
            FROM vhf_label
            WHERE step{step_num_str}_worker_name IS NOT NULL AND step1_worker_name != '' and step{step_num_str}_datetime >= '{start_date}' and step{step_num_str}_datetime <= '{end_date}'
            GROUP BY step{step_num_str}_worker_name
            ORDER BY task_count DESC;
        """
    else: # step_num_str 가 0 인 경우..
        query = f"""
            SELECT worker_name, COUNT(*) as task_count
            FROM vhf_label_file
            WHERE worker_name IS NOT NULL AND worker_name != '' and updated_datetime >= '{start_date}' and updated_datetime <= '{end_date}'
            GROUP BY worker_name
            ORDER BY task_count DESC;
        """
    worker_data = psql.read_sql(query, connection)
    connection.close()
    if step_num_str != '0':
        # 사용자 이름 뒤에 작업량을 괄호로 추가
        worker_names = [f"{row['step' + step_num_str + '_worker_name']} ({row['task_count']})" for idx, row in worker_data.iterrows()]
    else:
        worker_names = [f"{row['worker_name']} ({row['task_count']})" for idx, row in worker_data.iterrows()]
    return worker_names
# 사용자별 또는 전체 사용자 통계 및 작업내역 조회 기능
def get_user_stats(worker_name=None, start_date=None, end_date=None, step_num_str='1'):
    connection = psycopg2.connect(host=HOSTNAME, dbname=DATABASE, user=USERNAME, password=PASSWORD)
    columnlist = ''' (['filename', 'filepath', 'source', 'created_datetime', 'submit_step',
       'approve_step', 'audio_length', 'audio_status', 'worker_name',
       'model_script_china', 'model_script_kor', 'model_script_eng',
       'final_script_china', 'final_script_eng', 'final_script_kor',
       'final_status', 'step1_script_china', 'step1_script_kor',
       'step1_script_eng', 'step1_status', 'step1_datetime',
       'step1_worker_name', 'step1_comment', 'step1_cut_check',
       'step2_script_china', 'step2_script_kor', 'step2_script_eng',
       'step2_status', 'step2_datetime', 'step2_worker_name', 'step2_comment',
       'step2_cut_check', 'step3_script_china', 'step3_script_kor',
       'step3_script_eng', 'step3_status', 'step3_datetime',
       'step3_worker_name', 'step3_comment', 'step3_cut_check',
       'step4_script_china', 'step4_script_kor', 'step4_script_eng',
       'step4_status', 'step4_datetime', 'step4_worker_name', 'step4_comment',
       'step4_cut_check', 'step5_script_china', 'step5_script_kor',
       'step5_script_eng', 'step5_status', 'step5_datetime',
       'step5_worker_name', 'step5_comment', 'step5_cut_check',
       'step6_script_china', 'step6_script_kor', 'step6_script_eng',
       'step6_status', 'step6_datetime', 'step6_worker_name', 'step6_comment',
       'step6_cut_check']'''
    if step_num_str == '1':
        view_columns = [ 'step1_datetime','step1_worker_name', 'step1_status','filename', 'step1_script_china', 'filepath', 'source', 'created_datetime', 'submit_step',
       'approve_step', 'audio_length', 'audio_status',
       'model_script_china', 'model_script_kor', 'model_script_eng',
       'final_script_china', 'final_script_eng', 'final_script_kor',
       'final_status', 'step1_script_kor',
       'step1_script_eng',  'step1_comment', 'step1_cut_check', 'worker_name']
        query = f"""
            SELECT
                *
            FROM
                vhf_label
            WHERE
                step{step_num_str}_datetime >= '{start_date}'
                AND step{step_num_str}_datetime <= '{end_date + ' 23:59:59'}'
        """
        if worker_name != '전체': # 개별 조회.
            query += f" AND step{step_num_str}_worker_name = '{worker_name}' AND step{step_num_str}_worker_name IS NOT NULL AND step{step_num_str}_worker_name != '' "
            data = psql.read_sql(query, connection).sort_values(by='step1_datetime',ascending=False).reset_index(drop=True)
            data = data[view_columns]
            print(data.columns)
        else: # 전체 조회
            query += f" AND  step{step_num_str}_worker_name IS NOT NULL AND step{step_num_str}_worker_name != ''"
            data = psql.read_sql(query, connection).sort_values(by='step1_datetime',ascending=False).reset_index(drop=True)
            data = data[view_columns]
    if step_num_str == '2':
        view_columns = [ 'step2_datetime','step2_worker_name', 'step2_status','filename','step2_comment', 'step2_script_china',
                         'step2_script_kor', 'step2_script_eng',
                           'step2_cut_check',
                        'step1_worker_name', 'step1_status', 'step1_script_china',
                        'filepath', 'source', 'created_datetime', 'submit_step',
                        'approve_step', 'audio_length', 'audio_status',
                        'model_script_china', 'model_script_kor', 'model_script_eng',
                        'final_script_china', 'final_script_eng', 'final_script_kor',
                        'final_status', 'step1_script_kor',
                        'step1_script_eng',  'step1_comment', 'step1_cut_check', 'worker_name']
        query = f"""
            SELECT
                *
            FROM
                vhf_label
            WHERE
                step{step_num_str}_datetime >= '{start_date}'
                AND step{step_num_str}_datetime <= '{end_date + ' 23:59:59'}'
        """
        if worker_name != '전체': # 개별 조회.
            query += f" AND step{step_num_str}_worker_name = '{worker_name}' AND step{step_num_str}_worker_name IS NOT NULL AND step{step_num_str}_worker_name != '' "
            data = psql.read_sql(query, connection).sort_values(by='step2_datetime',ascending=False).reset_index(drop=True)
            data = data[view_columns]
            print(data.columns)
        else: # 전체 조회
            query += f" AND  step{step_num_str}_worker_name IS NOT NULL AND step{step_num_str}_worker_name != ''"
            data = psql.read_sql(query, connection).sort_values(by='step2_datetime',ascending=False).reset_index(drop=True)
            data = data[view_columns]
    if step_num_str == '0': # step_num_str 가 0 인 경우..
        query = f"""
            SELECT
                *
            FROM
                vhf_label_file
            WHERE
                updated_datetime >= '{start_date}'
                AND updated_datetime <= '{end_date + ' 23:59:59'}'
        """
        if worker_name != '전체': # 개별 조회.
            query += f" AND worker_name = '{worker_name}' AND worker_name IS NOT NULL AND worker_name != '' "
            data = psql.read_sql(query, connection).sort_values(by='updated_datetime',ascending=False).reset_index(drop=True)
            data = data[['updated_datetime','worker_name','filename','status','audio_length']]
        else: # 전체 조회
            query += f" AND worker_name IS NOT NULL AND worker_name != ''"
            data = psql.read_sql(query, connection).sort_values(by='updated_datetime',ascending=False).reset_index(drop=True)
            data = data[['updated_datetime','worker_name','filename','status','audio_length']]
    connection.close()
    return data
# 작업량 조회와 세부 내역 표시
st.write("")
st.subheader("사용자별 작업량 조회")
# 사용자 이름만 선택할 수 있도록 분리
st.session_state.step_num_str = st.selectbox("작업 차수를 선택하세요 :", ['0차','1차','2차','3차','4차']).split('차')[0]
# 조회할 기간 선택
start_date = st.date_input("시작일", value=datetime.date.today() - datetime.timedelta(days=7))
end_date = st.date_input("종료일", value=datetime.date.today())
print('end_date', start_date,end_date)
# 사용자 목록 불러오기
worker_names = get_worker_names_with_counts(start_date,end_date,st.session_state.step_num_str)
worker_names.insert(0, '전체 사용자')  # 전체 사용자 옵션 추가
# 작업자 이름을 선택하거나 '전체 사용자'를 선택하도록 옵션 추가
if 'worker_name' not in st.session_state:
    st.session_state.worker_name = ""
# 사용자 이름만 선택할 수 있도록 분리
st.session_state.worker_name = st.selectbox("작업자 이름을 선택하세요(이름에 띄어쓰기가있으면, 조회가 안되요..ㅠ ):", worker_names, index=worker_names.index(st.session_state.worker_name) if st.session_state.worker_name in worker_names else 0).split(' ')[0]
# 현재 작업량 조회 버튼
if st.button("작업량 및 내역 조회") or 'stats' in st.session_state:
    if start_date and end_date:
        if 'stats' not in st.session_state or st.session_state.worker_name != worker_names:
            if st.session_state.worker_name == '전체 사용자':
                st.session_state.stats = get_user_stats(None, start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d'),st.session_state.step_num_str)
            else:
                st.session_state.stats = get_user_stats(st.session_state.worker_name, start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d'),st.session_state.step_num_str)
            st.session_state.selected_worker = st.session_state.worker_name
        stats = st.session_state.stats
        if not stats.empty:
            if st.session_state.worker_name == '전체 사용자':
                st.write(f"### 전체 사용자 작업 내역 ({start_date} ~ {end_date})")
            else:
                st.write(f"### 작업자: {st.session_state.worker_name} ({start_date} ~ {end_date})")
            if st.session_state.step_num_str == '0':
                st.write(f"중국어_감도양호:status 가 2번 ")
                st.write(f"중국어_감도약함, 잡음:status 가 3번 @@@@@")
                st.write(f"작업대상이 아님 : status 가 4번 ")
            st.write(f"총 작업 갯수: {len(stats)}")
            st.dataframe(stats)
            #st.write("### 작업 내역 음성 듣기")
            # 작업 파일 선택 (filename)
            #st.session_state.selected_file = st.selectbox("재생할 파일을 선택하세요", stats['filename'].tolist(), index=stats['filename'].tolist().index(st.session_state.selected_file) if 'selected_file' in st.session_state else 0)
            #print('-------------------------------------------stats',stats)
            # 선택한 filename에 해당하는 데이터 추출
            #selected_data = stats[stats['filename'] == st.session_state.selected_file].iloc[0]
            #st.button(f"{selected_data['filename']}  파일 이름이 다른 경우,  동기화 하기  -----------------------------")
            #st.write(f"**파일 경로:** {selected_data['filepath']}")
            #st.write(f"**모델 사용 결과:** {selected_data['model_script_china']}")
            #st.write(f"**1차 라벨링 내용 (작업자:{selected_data['step1_worker_name']}):** {selected_data['step1_script_china']}")
            #st.write(f"**상태:** {selected_data['step1_status']}")
            #st.write(f"**작업 시간:** {selected_data['step1_datetime']}")
            #st.write(f"**코멘트:** {selected_data['step1_comment']}")
            # 오디오 파일 재생
#            st.audio(selected_data['filepath'], format="audio/wav")
 #           st.write(selected_data.transpose())
        else:
            st.write("해당 기간 동안 작업 내역이 없습니다.")
    else:
        st.write("올바른 조회 기간을 입력해주세요.")
10:23
포트번호
http://203.253.202.13:8301/ (편집됨) 